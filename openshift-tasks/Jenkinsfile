#!groovy
podTemplate(
  label: "skopeo-pod",
  cloud: "openshift",
  inheritFrom: "maven",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/jenkins-agent-appdev",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi",
      resourceRequestCpu: "1",
      resourceLimitCpu: "2"
    )
  ]
) {
  node('skopeo-pod') {
    // Define Maven Command to point to the correct
    // settings for our Nexus installation
    def mvnCmd = "mvn -s ../nexus_settings.xml"

    // Checkout Source Code.
    stage('Checkout Source') {
      checkout scm
    }

    // Build the Tasks Service
    dir('openshift-tasks') {
      // The following variables need to be defined at the top level
      // and not inside the scope of a stage - otherwise they would not
      // be accessible from other stages.
      // Extract version from the pom.xml
      def version = getVersionFromPom("pom.xml")

      // TBD Set the tag for the development image: version + build number
      def devTag  = "${version}-${currentBuild.number}"
      // Set the tag for the production image: version
      def prodTag = "${version}"

      def devProject  = "${GUID}-tasks-dev"
      def prodProject = "${GUID}-tasks-prod"

      // Using Maven build the war file
      // Do not run tests in this step
      stage('Build war') {
        echo "Building version ${devTag}"

        // TBD: Execute Maven Build
        sh "${mvnCmd} clean install -DskipTests"
      }

      // TBD: The next two stages should run in parallel
      stage('Run Tests in parallel'){
        
        // Using Maven run the unit tests
        stage('Unit Tests') {
          echo "Running Unit Tests"

          // TBD: Execute Unit Tests
          sh "${mvnCmd} clean test"

        }

        // Using Maven to call SonarQube for Code Analysis
        stage('Code Analysis') {
          echo "Running Code Analysis"

          // TBD: Execute Sonarqube Tests
          sh "${mvnCmd} sonar:sonar \
              -Dsonar.host.url=http://sonarqube.gpte-hw-cicd.svc.cluster.local:9000"
          
        }
      }

      
      // Publish the built war file to Nexus
      stage('Publish to Nexus') {
        echo "Publish to Nexus"

        // TBD: Publish to Nexus
        sh "${mvnCmd} deploy versions:set -DnewVersion=${devTag} -DskipTests -Dmaven.install.skip=true \
        -DaltDeploymentRepository=nexus::default::http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/all-maven-public"
      }

      // Build the OpenShift Image in OpenShift and tag it.
      stage('Build and Tag OpenShift Image') {
        echo "Building OpenShift container image tasks:${devTag}"

        // TBD: Build Image, tag Image
        script {
          // Use the Default Cluster
          openshift.withCluster() {
             openshift.withProject("${GUID}-tasks-dev") {
                openshift.selector("bc", "tasks").startBuild("--from-file=http://nexus3.gpte-hw-cicd.svc.cluster.local:8081/repository/all-maven-public/org/jboss/quickstarts/eap/tasks/${devTag}/tasks-${devTag}.war",
                 "--wait=true")
                // Tag the image using the devTag.
                openshift.tag("tasks:latest", "tasks:${devTag}")
             }
          }
        }
      }

      // Deploy the built image to the Development Environment.
      stage('Deploy to Dev') {
        echo "Deploying container image to Development Project"

        // TBD: Deploy to development Project
        //      Set Image, Set VERSION
        //      Make sure the application is running and ready before proceeding
        script{
          openshift.withCluster() {
            openshift.withProject("${GUID}-tasks-dev") {

              openshift.set("image", "dc/tasks", "tasks=image-registry.openshift-image-registry.svc:5000/${GUID}-tasks-dev/tasks:${devTag}")

              //Update the config maps with the potentially changed properties files
              openshift.selector('configmap', 'tasks-config').delete()
              def configmap = openshift.create('configmap', 'tasks-config', '--from-file=./configuration/application-users.properties', '--from-file=./configuration/application-roles.properties' )

              // Deploy the application.
              openshift.selector("dc", "tasks").rollout().latest();

              def dc = openshift.selector("dc", "tasks").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "tasks-${dc_version}").object()

              echo "Waiting for ReplicationController tasks-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "tasks-${dc_version}").object()
              }

            }
          }
        }
      }

      // Copy Image to Nexus container registry
      stage('Copy Image to Nexus container registry') {

        steps{
          echo "Copy image to Nexus container registry"
          
          // TBD: Copy image to Nexus container registry
          // Use skopeo to copy
          sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds jtavares-redhat.com:\$(oc whoami -t) \
          --dest-creds admin:redhat \
          docker://image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${devTag} \
          docker://https://nexus-registry.gpte-hw-cicd.svc.cluster.local:5000/tasks:${devTag}"

          // TBD: Tag the built image with the production tag.
          script {
            openshift.withCluster() {
              openshift.withProject("${prodProject}") {
                openshift.tag("${devProject}/tasks:${devTag}", "${devProject}/tasks:${prodTag}")
                echo "Prod Tag: ${prodTag}"
              }
            }
          }
        }
      }

      // Blue/Green Deployment into Production
      // -------------------------------------
      def destApp   = "tasks-green"
      def activeApp = ""

      stage('Blue/Green Production Deployment') {
        // TBD: Determine which application is active
        //      Set Image, Set VERSION
        //      Deploy into the other application
        //      Make sure the application is running and ready before proceeding
        steps {
        echo "Blue/Green Deployment"

        // TBD: 1. Determine which application is active
        //      2. Update the image for the other application
        //      3. Deploy into the other application
        //      4. Update Config maps for other application
        //      5. Wait until application is running
        //         See above for example code

        script{
          openshift.withCluster() {
            openshift.withProject("${prodProject}") {
              activeApp = openshift.selector("route", "tasks").object().spec.to.name

              if(activeApp == "tasks-green"){
                destApp = "tasks-blue"
              }

              //Update the image on PRD DC
              def destDC = openshift.selector("dc", "${destApp}").object()
              echo "Prod Tag: ${prodTag}"
              destDC.spec.template.spec.containers[0].image="image-registry.openshift-image-registry.svc:5000/${devProject}/tasks:${prodTag}"
              openshift.apply(destDC)
              def containerImage = destDC.spec.template.spec.containers[0].image
              echo "Container Image ${containerImage}"

              //Deploy the dest application
              openshift.selector("dc", "${destApp}").rollout().latest()

              //Wait until app is Running
              def dc = openshift.selector("dc", "${destApp}").object()
              def dc_version = dc.status.latestVersion
              def rc = openshift.selector("rc", "${destApp}-${dc_version}").object()

              echo "Waiting for ReplicationController ${destApp}-${dc_version} to be ready"
              while (rc.spec.replicas != rc.status.readyReplicas) {
                sleep 5
                rc = openshift.selector("rc", "${destApp}-${dc_version}").object()
              }

              def route = openshift.selector("route", "tasks").object()
              route.spec.to.name = "${destApp}"
              openshift.apply(route)


            }
          }
        }


      }

      stage('Switch over to new Version') {
        echo "Switching Production application to ${destApp}."
        script {
            openshift.withCluster() {
                openshift.withProject(prodProject) {
                    openshift.patch("route/tasks", "'{\"spec\":{\"to\":{\"name\":\"${destApp}\"}}}'")
                }
            }
        }
      }
    }
    }
  }
  }


// Convenience Functions to read version from the pom.xml
// Do not change anything below this line.
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}